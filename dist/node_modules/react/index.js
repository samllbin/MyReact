(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

	const currentDispatcher = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('hook只能在函数式组件中执行');
	    }
	    return dispatcher;
	};

	const isSupportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = isSupportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	//返回结果是ReactElement的数组结构
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'DCB'
	    };
	    return element;
	};
	function isValidElement$1(object) {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	}
	const jsx = (type, config, ...children) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = val + '';
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        //判断剩下的props是否是config上的，而不是原型上的
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const childrenLength = children.length;
	    if (childrenLength) {
	        //有一个或多个child
	        if (childrenLength === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	//打包出来的对应React包
	const useState = (initialState) => {
	    //获取当前上下文中所以的hook,并从中拿到useState
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	const useEffect = (create, deps) => {
	    //获取当前上下文中所以的hook,并从中拿到useState
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useEffect(create, deps);
	};
	//建立内部数据共享层数据共享层,react中名字翻译为中文为,内部数据不要动，动了就会被炒鱿鱼
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher
	};
	const version = '0.0.0';
	//TODO根据环境区分使用jsx还是jsxDEV
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useEffect = useEffect;
	exports.useState = useState;
	exports.version = version;

}));
